const o=JSON.parse('{"key":"v-861a1c58","path":"/language/java/frame/SpringFamily/SpringBoot-%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3.html","title":"SpringBoot - 自动装配原理详解","lang":"zh-CN","frontmatter":{"description":"SpringBoot - 自动装配原理详解 什么是 SpringBoot 自动装配？ 我们现在提到自动装配的时候，一般会和 Spring Boot 联系在一起。但是，实际上 Spring Framework 早就实现了这个功能。Spring Boot 只是在其基础上，通过 ==SPI== 的方式，做了进一步优化。 SpringBoot 定义了一套接口规范，这套规范规定：SpringBoot 在启动时会扫描外部引用 jar 包中的META-INF/spring.factories文件，将文件中配置的类型信息加载到 Spring 容器（此处涉及到 JVM 类加载机制与 Spring 的容器知识），并执行类中定义的各种操作。对于外部 jar 来说，只需要按照 SpringBoot 定义的标准，就能将自己的功能装置进 SpringBoot。","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-v2-demo.mrhope.site/CodeLearning/language/java/frame/SpringFamily/SpringBoot-%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"CodeLearning"}],["meta",{"property":"og:title","content":"SpringBoot - 自动装配原理详解"}],["meta",{"property":"og:description","content":"SpringBoot - 自动装配原理详解 什么是 SpringBoot 自动装配？ 我们现在提到自动装配的时候，一般会和 Spring Boot 联系在一起。但是，实际上 Spring Framework 早就实现了这个功能。Spring Boot 只是在其基础上，通过 ==SPI== 的方式，做了进一步优化。 SpringBoot 定义了一套接口规范，这套规范规定：SpringBoot 在启动时会扫描外部引用 jar 包中的META-INF/spring.factories文件，将文件中配置的类型信息加载到 Spring 容器（此处涉及到 JVM 类加载机制与 Spring 的容器知识），并执行类中定义的各种操作。对于外部 jar 来说，只需要按照 SpringBoot 定义的标准，就能将自己的功能装置进 SpringBoot。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-16T01:20:44.000Z"}],["meta",{"property":"article:author","content":"Mr.Walter"}],["meta",{"property":"article:modified_time","content":"2023-06-16T01:20:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot - 自动装配原理详解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-16T01:20:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Walter\\",\\"url\\":\\"https://walterxiong.github.io/CodeLearning/\\"}]}"]]},"headers":[{"level":2,"title":"什么是 SpringBoot 自动装配？","slug":"什么是-springboot-自动装配","link":"#什么是-springboot-自动装配","children":[]},{"level":2,"title":"SpringBoot 是如何实现自动装配的？","slug":"springboot-是如何实现自动装配的","link":"#springboot-是如何实现自动装配的","children":[{"level":3,"title":"@EnableAutoConfiguration：实现自动装配的核心注解","slug":"enableautoconfiguration-实现自动装配的核心注解","link":"#enableautoconfiguration-实现自动装配的核心注解","children":[]},{"level":3,"title":"AutoConfigurationImportSelector：加载自动装配类","slug":"autoconfigurationimportselector-加载自动装配类","link":"#autoconfigurationimportselector-加载自动装配类","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1686878444000,"updatedTime":1686878444000,"contributors":[{"name":"WalterXiong","email":"xiongjun-ol@outlook.com","commits":1}]},"readingTime":{"minutes":4.62,"words":1385},"filePathRelative":"language/java/frame/SpringFamily/SpringBoot-自动装配原理详解.md","localizedDate":"2023年6月16日","excerpt":"<h1> SpringBoot - 自动装配原理详解</h1>\\n<h2> 什么是 SpringBoot 自动装配？</h2>\\n<p>我们现在提到自动装配的时候，一般会和 Spring Boot 联系在一起。但是，实际上 Spring Framework 早就实现了这个功能。Spring Boot 只是在其基础上，通过 ==SPI== 的方式，做了进一步优化。</p>\\n<blockquote>\\n<p>SpringBoot 定义了一套接口规范，这套规范规定：SpringBoot 在启动时会扫描外部引用 jar 包中的<code>META-INF/spring.factories</code>文件，将文件中配置的类型信息加载到 Spring 容器（此处涉及到 JVM 类加载机制与 Spring 的容器知识），并执行类中定义的各种操作。对于外部 jar 来说，只需要按照 SpringBoot 定义的标准，就能将自己的功能装置进 SpringBoot。</p>\\n</blockquote>","autoDesc":true}');export{o as data};
