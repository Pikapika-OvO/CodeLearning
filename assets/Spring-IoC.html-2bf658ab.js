const e=JSON.parse('{"key":"v-afdad322","path":"/language/java/frame/SpringFamily/Spring-IoC.html","title":"Spring - IoC 基础","lang":"zh-CN","frontmatter":{"description":"Spring - IoC 基础 1. Spring IoC 1.1 谈谈自己对于 Spring IoC 的了解 IoC（Inversion of Control：控制反转） 是一种设计思想，而不是一个具体的技术实现。IoC 的思想就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理。不过， IoC 并非 Spring 特有，在其他语言中也有应用。 ==为什么叫控制反转？== 控制 ：指的是对象创建（实例化、管理）的权力 反转 ：控制权交给外部环境（Spring 框架、IoC 容器）","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-v2-demo.mrhope.site/CodeLearning/language/java/frame/SpringFamily/Spring-IoC.html"}],["meta",{"property":"og:site_name","content":"CodeLearning"}],["meta",{"property":"og:title","content":"Spring - IoC 基础"}],["meta",{"property":"og:description","content":"Spring - IoC 基础 1. Spring IoC 1.1 谈谈自己对于 Spring IoC 的了解 IoC（Inversion of Control：控制反转） 是一种设计思想，而不是一个具体的技术实现。IoC 的思想就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理。不过， IoC 并非 Spring 特有，在其他语言中也有应用。 ==为什么叫控制反转？== 控制 ：指的是对象创建（实例化、管理）的权力 反转 ：控制权交给外部环境（Spring 框架、IoC 容器）"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-16T01:20:44.000Z"}],["meta",{"property":"article:author","content":"Mr.Walter"}],["meta",{"property":"article:modified_time","content":"2023-06-16T01:20:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring - IoC 基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-16T01:20:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Walter\\",\\"url\\":\\"https://walterxiong.github.io/CodeLearning/\\"}]}"]]},"headers":[{"level":2,"title":"1. Spring IoC","slug":"_1-spring-ioc","link":"#_1-spring-ioc","children":[{"level":3,"title":"1.1 谈谈自己对于 Spring IoC 的了解","slug":"_1-1-谈谈自己对于-spring-ioc-的了解","link":"#_1-1-谈谈自己对于-spring-ioc-的了解","children":[]},{"level":3,"title":"1.2 什么是 Spring Bean？","slug":"_1-2-什么是-spring-bean","link":"#_1-2-什么是-spring-bean","children":[]},{"level":3,"title":"1.3 将一个类声明为 Bean 的注解有哪些?","slug":"_1-3-将一个类声明为-bean-的注解有哪些","link":"#_1-3-将一个类声明为-bean-的注解有哪些","children":[]},{"level":3,"title":"1.4 @Component 和 @Bean 的区别是什么？","slug":"_1-4-component-和-bean-的区别是什么","link":"#_1-4-component-和-bean-的区别是什么","children":[]},{"level":3,"title":"1.5 注入 Bean 的注解有哪些？","slug":"_1-5-注入-bean-的注解有哪些","link":"#_1-5-注入-bean-的注解有哪些","children":[]},{"level":3,"title":"1.6 @Autowired 和 @Resource 的区别是什么？","slug":"_1-6-autowired-和-resource-的区别是什么","link":"#_1-6-autowired-和-resource-的区别是什么","children":[]},{"level":3,"title":"1.7 Bean 的作用域有哪些?","slug":"_1-7-bean-的作用域有哪些","link":"#_1-7-bean-的作用域有哪些","children":[]},{"level":3,"title":"1.8 Bean 的生命周期了解么?","slug":"_1-8-bean-的生命周期了解么","link":"#_1-8-bean-的生命周期了解么","children":[]}]},{"level":2,"title":"什么是循环依赖？","slug":"什么是循环依赖","link":"#什么是循环依赖","children":[]},{"level":2,"title":"3级缓存解决循环依赖（singleton）","slug":"_3级缓存解决循环依赖-singleton","link":"#_3级缓存解决循环依赖-singleton","children":[]}],"git":{"createdTime":1686878444000,"updatedTime":1686878444000,"contributors":[{"name":"WalterXiong","email":"xiongjun-ol@outlook.com","commits":1}]},"readingTime":{"minutes":7.89,"words":2367},"filePathRelative":"language/java/frame/SpringFamily/Spring-IoC.md","localizedDate":"2023年6月16日","excerpt":"<h1> Spring - IoC 基础</h1>\\n<h2> 1. Spring IoC</h2>\\n<h3> 1.1 谈谈自己对于 Spring IoC 的了解</h3>\\n<p><strong>IoC（Inversion of Control：控制反转）</strong> 是一种设计思想，而不是一个具体的技术实现。IoC 的思想就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理。不过， IoC 并非 Spring 特有，在其他语言中也有应用。</p>\\n<p>==<strong>为什么叫控制反转？</strong>==</p>\\n<ul>\\n<li><strong>控制</strong> ：指的是对象创建（实例化、管理）的权力</li>\\n<li><strong>反转</strong> ：控制权交给外部环境（Spring 框架、IoC 容器）</li>\\n</ul>","autoDesc":true}');export{e as data};
