const e=JSON.parse('{"key":"v-7f382f8a","path":"/language/java/frame/SpringFamily/Spring-AoP.html","title":"Spring - AoP","lang":"zh-CN","frontmatter":{"description":"Spring - AoP 谈谈自己对于 AOP 的了解 AOP（Aspect-Oriented Programming - 面向切面编程（基于动态代理实现）），在程序原有纵向执行流程中，针对某一个或某一些方法添加通知，形成横切面过程就叫做面向切面编程。 能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。 Spring AOP 就是基于动态代理的，如果要代理的对象，实现了某个接口，那么 Spring AOP 会使用 JDK Proxy，去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候 Spring AOP 会使用 Cglib 生成一个被代理对象的子类来作为代理，如下图所示：","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-v2-demo.mrhope.site/CodeLearning/language/java/frame/SpringFamily/Spring-AoP.html"}],["meta",{"property":"og:site_name","content":"CodeLearning"}],["meta",{"property":"og:title","content":"Spring - AoP"}],["meta",{"property":"og:description","content":"Spring - AoP 谈谈自己对于 AOP 的了解 AOP（Aspect-Oriented Programming - 面向切面编程（基于动态代理实现）），在程序原有纵向执行流程中，针对某一个或某一些方法添加通知，形成横切面过程就叫做面向切面编程。 能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。 Spring AOP 就是基于动态代理的，如果要代理的对象，实现了某个接口，那么 Spring AOP 会使用 JDK Proxy，去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候 Spring AOP 会使用 Cglib 生成一个被代理对象的子类来作为代理，如下图所示："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-16T01:20:44.000Z"}],["meta",{"property":"article:author","content":"Mr.Walter"}],["meta",{"property":"article:modified_time","content":"2023-06-16T01:20:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring - AoP\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-16T01:20:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Walter\\",\\"url\\":\\"https://walterxiong.github.io/CodeLearning/\\"}]}"]]},"headers":[{"level":2,"title":"谈谈自己对于 AOP 的了解","slug":"谈谈自己对于-aop-的了解","link":"#谈谈自己对于-aop-的了解","children":[{"level":3,"title":"AOP 切面编程设计到的一些专业术语","slug":"aop-切面编程设计到的一些专业术语","link":"#aop-切面编程设计到的一些专业术语","children":[]},{"level":3,"title":"Spring AOP 和 AspectJ AOP 有什么区别？","slug":"spring-aop-和-aspectj-aop-有什么区别","link":"#spring-aop-和-aspectj-aop-有什么区别","children":[]},{"level":3,"title":"AspectJ 定义的通知类型有哪些？","slug":"aspectj-定义的通知类型有哪些","link":"#aspectj-定义的通知类型有哪些","children":[]},{"level":3,"title":"多个切面的执行顺序如何控制？","slug":"多个切面的执行顺序如何控制","link":"#多个切面的执行顺序如何控制","children":[]}]},{"level":2,"title":"AspectJ","slug":"aspectj","link":"#aspectj","children":[]},{"level":2,"title":"普通配置方式","slug":"普通配置方式","link":"#普通配置方式","children":[]},{"level":2,"title":"处理事务配置方式（SM Ultra）","slug":"处理事务配置方式-sm-ultra","link":"#处理事务配置方式-sm-ultra","children":[{"level":3,"title":"普通 XML 配置方式","slug":"普通-xml-配置方式","link":"#普通-xml-配置方式","children":[]},{"level":3,"title":"注解配置方式","slug":"注解配置方式","link":"#注解配置方式","children":[]}]},{"level":2,"title":"切入点表达式","slug":"切入点表达式","link":"#切入点表达式","children":[]}],"git":{"createdTime":1686878444000,"updatedTime":1686878444000,"contributors":[{"name":"WalterXiong","email":"xiongjun-ol@outlook.com","commits":1}]},"readingTime":{"minutes":9.07,"words":2720},"filePathRelative":"language/java/frame/SpringFamily/Spring-AoP.md","localizedDate":"2023年6月16日","excerpt":"<h1> Spring - AoP</h1>\\n<h2> 谈谈自己对于 AOP 的了解</h2>\\n<p>AOP（Aspect-Oriented Programming - 面向切面编程（基于动态代理实现）），在程序原有纵向执行流程中，针对某一个或某一些方法添加通知，形成横切面过程就叫做面向切面编程。</p>\\n<p>能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。</p>\\n<p>Spring AOP 就是基于动态代理的，如果要代理的对象，实现了某个接口，那么 Spring AOP 会使用 <strong>JDK Proxy</strong>，去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候 Spring AOP 会使用 <strong>Cglib</strong> 生成一个被代理对象的子类来作为代理，如下图所示：</p>","autoDesc":true}');export{e as data};
