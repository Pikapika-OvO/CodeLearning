import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c,b as n,d as s,e as u,f as a}from"./app-422b0c18.js";const l={},i=a(`<h1 id="jvm-内存区域与内存溢出异常" tabindex="-1"><a class="header-anchor" href="#jvm-内存区域与内存溢出异常" aria-hidden="true">#</a> JVM - 内存区域与内存溢出异常</h1><h2 id="运行时数据区" tabindex="-1"><a class="header-anchor" href="#运行时数据区" aria-hidden="true">#</a> 运行时数据区</h2><p>简图：</p><h3 id="_1-程计数器" tabindex="-1"><a class="header-anchor" href="#_1-程计数器" aria-hidden="true">#</a> 1. 程计数器</h3><p>program counter register，</p><p>此内存区域是《Java 虚拟机规范》中唯一没有规定任何 OOM<code> (OutOfMemoryError)</code>的区域</p><h3 id="_2-虚拟机栈" tabindex="-1"><a class="header-anchor" href="#_2-虚拟机栈" aria-hidden="true">#</a> 2. 虚拟机栈</h3><p>栈中基本的单位是栈帧，栈帧包含：操作数栈、局部变量表、动态链接、方法出口。虚拟机栈为虚拟机执行 Java 方法服务。</p><h3 id="_3-本地方法栈" tabindex="-1"><a class="header-anchor" href="#_3-本地方法栈" aria-hidden="true">#</a> 3. 本地方法栈</h3><p>为虚拟机使用到的（Native）方法服务</p><h3 id="_4-堆空间" tabindex="-1"><a class="header-anchor" href="#_4-堆空间" aria-hidden="true">#</a> 4. 堆空间</h3><p>也成为 GC（Garbage Collected Hop）堆 ；Java 中，“几乎”所有的对象都分配在堆上</p><p>字符串常量池</p><p>静态常量</p><h3 id="_5-方法区" tabindex="-1"><a class="header-anchor" href="#_5-方法区" aria-hidden="true">#</a> 5. 方法区</h3><h3 id="_6-运行时常量池l" tabindex="-1"><a class="header-anchor" href="#_6-运行时常量池l" aria-hidden="true">#</a> 6. 运行时常量池L</h3><h3 id="_7-直接内存" tabindex="-1"><a class="header-anchor" href="#_7-直接内存" aria-hidden="true">#</a> 7. 直接内存</h3><h2 id="hotspot-虚拟机对象探秘" tabindex="-1"><a class="header-anchor" href="#hotspot-虚拟机对象探秘" aria-hidden="true">#</a> Hotspot 虚拟机对象探秘</h2><h3 id="_1-对象的创建过程" tabindex="-1"><a class="header-anchor" href="#_1-对象的创建过程" aria-hidden="true">#</a> 1. 对象的创建过程</h3><h4 id="step1-类的加载检查" tabindex="-1"><a class="header-anchor" href="#step1-类的加载检查" aria-hidden="true">#</a> step1：类的加载检查</h4><p>虚拟机在收到一个 new 指令之后，会首先检查指令带的参数在常量池中是否能够定位到这个类的的符号引用，然后根据符号引用检查这个符号应用代表的类是否已经被加载、解析、初始化过；如果没有，那就<strong>必须</strong>执行==类加载的过程==。</p><h4 id="step2-内存分配" tabindex="-1"><a class="header-anchor" href="#step2-内存分配" aria-hidden="true">#</a> step2：内存分配</h4><p>在类的加载检查通过之后，接下来虚拟机会为新生成的对象分配内存。</p><p>虚拟机为对象分配内存的方式，就好比从 Java 堆内存中划分出一块确定大小的区域出来给该对象，而内存分配算法有两种：<code>指针碰撞法</code>，<code>空闲列表法</code>，虚拟机采用哪种分配算法是由堆空间中内存是否规整（整齐）决定的，而对空间中的内存分布是否规整又是由改虚拟机所搭载的管理堆内存的垃圾回收器是否具有标记整理能力决定的。</p><ul><li>指针碰撞 <ul><li>适合于堆内存规整的情况。</li><li>假设 Java 堆内存绝对规整（没有内存碎片），将已经划分给别的对象（已使用）的内存分到一边，将其他还没有使用的（空闲）的内存放到另外一边，已使用和空闲内存的零界点是一个指针，分配内存的时候就是将该指针向着空闲的那边移动需要分配的对象大小的相等的距离。</li><li>搭载该分配算法的垃圾回收器：<code>Serial</code>、<code>NewPar</code>。</li></ul></li><li>空闲列表 <ul><li>适合堆内存不规整，存在内存碎片的情况。</li><li>因为 Java 堆内存中内存分配不是连续的，存在内存碎片，所以虚拟机自己会维护一张内存空间地址和对象的表，在分配内存的时候需要从内存中调一块空闲的内存空间分配给对应的对象，然后自己在维护更新这张地址表，所以叫空闲列表。</li><li>搭载该分配算法的垃圾回收器：<code>CMS</code>。</li></ul></li></ul><p>==// todo 这里还没写（TLAB）==</p><h4 id="step3-初始化零值" tabindex="-1"><a class="header-anchor" href="#step3-初始化零值" aria-hidden="true">#</a> step3：初始化零值</h4><p>分配到合适的内存空间之后，虚拟必须将分配到的内存空间（但不包括对象头）进行初始化零值，这一步的操作保证对象的实例字段在 Java 代码中可以不赋初始值就可以直接使用，保证程序代码能够直接访问到这些字段的数据类型对应的零值。</p><h4 id="step4-设置对象头" tabindex="-1"><a class="header-anchor" href="#step4-设置对象头" aria-hidden="true">#</a> step4：设置对象头</h4><p>（<strong>Object Header</strong>）接下来，虚拟机还要对对象进行必要的设置，也就是设置对象头的信息，其中包括：对象是属于哪个类的实例、如何才能找到类的元数据信息、对象的 <code>Hash</code> 码、对象的 <code>GC</code> 分带年龄信息等，这些信息都存在对象头中。还有，根据虚拟机当前的运行状态，会设置锁的信息（后面会说到）。</p><h4 id="step5-执行-init-方法" tabindex="-1"><a class="header-anchor" href="#step5-执行-init-方法" aria-hidden="true">#</a> step5：执行 <code>&lt;init&gt;</code> 方法</h4><p>到这里在虚拟机的角度上来看，一个新对象就已经产生了，但是站在 Java 代码的角度上来说对象的创建才刚刚开始 —— 构造函数（Class 文件中的 <code>&lt;init&gt;()</code> 方法）还没有执行，所有的字段都还是默认的零值。一般来说在 new 指令后会接着执行 <code>&lt;init&gt;()</code>，按照程序猿的想法对对象进行初始化，到这时候一个真正可用的对象才算是被完全构造出来。</p><h3 id="_2-对象的内存布局" tabindex="-1"><a class="header-anchor" href="#_2-对象的内存布局" aria-hidden="true">#</a> 2. 对象的内存布局</h3><p>在 HotSpot 虚拟机中，对象在堆内存中的存储布局可分为三类：对象头（Object Header）、实例数据（Instance Data）、对其填充（Padding）。</p><p>HotSpot 中对象头主要包含两类数据：</p><ul><li>第一类是：==<strong>对象自身的运行时数据</strong>==，</li><li>另一类是：==<strong>类型指针</strong>==，</li></ul><p>==// todo 这里还没写==</p><h3 id="_3-对象的访问定位" tabindex="-1"><a class="header-anchor" href="#_3-对象的访问定位" aria-hidden="true">#</a> 3. 对象的访问定位</h3><p>==// todo 这里还没写==</p><h2 id="outofmemoryerror-异常验证" tabindex="-1"><a class="header-anchor" href="#outofmemoryerror-异常验证" aria-hidden="true">#</a> OutOfMemoryError 异常验证</h2><p>在 《Java 虚拟机规范》中，仅有除了程序计数器意外，虚拟机其他的几个运行时区域都有可能会发生 OutOfMemoryError，下面我们就来实际验证一下这些对应的区域的发生异常的实际情况。我们模拟对饮区域的异常情况有两个目的：</p><ol><li>一是通过代码我们能够验证《Java 虚拟机规范》中各个区域存储的内容。</li><li>通过模拟异常的复现，能够帮助我们在实际开发的过程中，根据异常的提示信息迅速得知是哪个区域出现了内存溢出，知道什么样的代码可能会导致内存溢出，以及内存溢出之后我们该怎么处理。</li></ol><h3 id="_1-java-堆溢出" tabindex="-1"><a class="header-anchor" href="#_1-java-堆溢出" aria-hidden="true">#</a> 1. Java 堆溢出</h3><p>首先，我们看看堆空间，堆是用来存储对象的，我们只要不断的创建对象，并保证 GC Roots 与各个对象之间保持有可达的路径来避免这些对象被 GC 垃圾回收器扫描回收掉，那么随着对象数量的增加总会触及到堆空间的最大值限制，从而导致堆空间内存溢出。</p><p>我们需要控制变量，调整运行程序的 VM 参数，我们通过设置 <code>-Xmx20m </code> 和 <code>-Xms20m </code> 两个参数将堆空间的最大容量和最小容量都设置为 20M 即可限制堆空间的自动扩展，通过 <code>-XX:+HeapDumpOnOutOfMemoryError</code> 参数可以让虚拟机在发生内存溢出时 DUMP 出当前的内存堆转储快照以便后续进行分析。</p><p><img src="https://cdn.jsdelivr.net/gh/WalterXiong/typora-img/img/202205252233378.png" alt="image-20220525223309265"></p><p>接下来我们通过以下代码，来模拟让堆空间发生 OOM 异常</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * -Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError
 */</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapOOM</span> <span class="token punctuation">{</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OOMObject</span><span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OOMObject</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OOMObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.jsdelivr.net/gh/WalterXiong/typora-img/img/202205252235291.png" alt="image-20220525223548183"></p><h3 id="_2-虚拟机栈和本地方法栈溢出" tabindex="-1"><a class="header-anchor" href="#_2-虚拟机栈和本地方法栈溢出" aria-hidden="true">#</a> 2. 虚拟机栈和本地方法栈溢出</h3><p>总所粥汁（很河里：</p><ul><li>虚拟机栈是为了虚拟机执行 Java 方法（字节码）服务的；</li><li>本地方法栈是为了虚拟机执行本地（<code>native</code>）方法服务的；</li></ul><p>而在 《Java 虚拟机规范》规范了两种异常：</p><ol><li>如果线程申请的栈的深度大于虚拟机栈允许的最大深度，则会发生 <code>StackOverflowError</code> 异常；</li><li>如果虚拟机栈==支持自动扩展==，栈内存在扩展容量时无法申请到足够的内存空间时，会发生 <code>OutOfMemroyError</code> 异常；</li></ol><p>《Java 虚拟机规范》中明确允许 Java 虚拟机自行选择是否实现栈内存自动扩展，但是 HotSpot 虚拟机的选择是不支持扩展，所以除非虚拟机在创建线程时因为申请不到足够的内存而出现 OutOfMemoryError，否则在线程的运行期间是不会因为内存扩展而出现内存溢出的，只会因为栈容量中无法容纳新的栈帧而导致 Stackoverflow 异常。</p><p>为此我们可以验证一下上面的结论的真实性。我们先使用单线程的形式，来实验一下是否会让 HotSpot 产生 OutOfMemoryError ；</p><ul><li>使用 <code>-Xss</code> 参数限制栈内存的容量，使栈的深度达到可申请栈的深度的最大值，抛出 StackoverflowError 异常，我们同时打印一下堆栈的深度；</li><li>同上的条件限制栈容量的同时，增大此方法帧中局部变量表的长度，抛出 StackoverflowError 异常，我们同时打印一下堆栈的深度；</li></ul><p>第一种，我们利用方法递归来，增加请求栈的深度</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * VM Args: -Xss128k
 */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaVMStackSOF</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> stackLength <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">stackLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        stackLength<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token function">stackLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">JavaVMStackSOF</span> sof <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaVMStackSOF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            sof<span class="token punctuation">.</span><span class="token function">stackLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;stack length : &quot;</span> <span class="token operator">+</span> sof<span class="token punctuation">.</span>stackLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.jsdelivr.net/gh/WalterXiong/typora-img/img/202205252326003.png" alt="image-20220525232631904"></p><p>第二种，往方法帧中增大局部变量表的长度（大小）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * VM Args: -Xss128k
 */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaVMStackSOF_StackFrameCapacity</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> stackLength <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">stackLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">long</span> unused1<span class="token punctuation">,</span>  unused2<span class="token punctuation">,</span>  unused3<span class="token punctuation">,</span>  unused4<span class="token punctuation">,</span>  unused5<span class="token punctuation">,</span>  
            unused6<span class="token punctuation">,</span>  unused7<span class="token punctuation">,</span>  unused8<span class="token punctuation">,</span>  unused9<span class="token punctuation">,</span>  unused10<span class="token punctuation">,</span>
            unused11<span class="token punctuation">,</span> unused12<span class="token punctuation">,</span> unused13<span class="token punctuation">,</span> unused14<span class="token punctuation">,</span> unused15<span class="token punctuation">,</span> 
            unused16<span class="token punctuation">,</span> unused17<span class="token punctuation">,</span> unused18<span class="token punctuation">,</span> unused19<span class="token punctuation">,</span> unused20<span class="token punctuation">,</span>
            unused21<span class="token punctuation">,</span> unused22<span class="token punctuation">,</span> unused23<span class="token punctuation">,</span> unused24<span class="token punctuation">,</span> unused25<span class="token punctuation">,</span> 
            unused26<span class="token punctuation">,</span> unused27<span class="token punctuation">,</span> unused28<span class="token punctuation">,</span> unused29<span class="token punctuation">,</span> unused30<span class="token punctuation">,</span>
            unused31<span class="token punctuation">,</span> unused32<span class="token punctuation">,</span> unused33<span class="token punctuation">,</span> unused34<span class="token punctuation">,</span> unused35<span class="token punctuation">,</span> 
            unused36<span class="token punctuation">,</span> unused37<span class="token punctuation">,</span> unused38<span class="token punctuation">,</span> unused39<span class="token punctuation">,</span> unused40<span class="token punctuation">,</span>
            unused41<span class="token punctuation">,</span> unused42<span class="token punctuation">,</span> unused43<span class="token punctuation">,</span> unused44<span class="token punctuation">,</span> unused45<span class="token punctuation">,</span> 
            unused46<span class="token punctuation">,</span> unused47<span class="token punctuation">,</span> unused48<span class="token punctuation">,</span> unused49<span class="token punctuation">,</span> unused50<span class="token punctuation">,</span>
            unused51<span class="token punctuation">,</span> unused52<span class="token punctuation">,</span> unused53<span class="token punctuation">,</span> unused54<span class="token punctuation">,</span> unused55<span class="token punctuation">,</span> 
            unused56<span class="token punctuation">,</span> unused57<span class="token punctuation">,</span> unused58<span class="token punctuation">,</span> unused59<span class="token punctuation">,</span> unused60<span class="token punctuation">,</span>
            unused61<span class="token punctuation">,</span> unused62<span class="token punctuation">,</span> unused63<span class="token punctuation">,</span> unused64<span class="token punctuation">,</span> unused65<span class="token punctuation">,</span> 
            unused66<span class="token punctuation">,</span> unused67<span class="token punctuation">,</span> unused68<span class="token punctuation">,</span> unused69<span class="token punctuation">,</span> unused70<span class="token punctuation">,</span>
            unused71<span class="token punctuation">,</span> unused72<span class="token punctuation">,</span> unused73<span class="token punctuation">,</span> unused74<span class="token punctuation">,</span> unused75<span class="token punctuation">,</span> 
            unused76<span class="token punctuation">,</span> unused77<span class="token punctuation">,</span> unused78<span class="token punctuation">,</span> unused79<span class="token punctuation">,</span> unused80<span class="token punctuation">,</span>
            unused81<span class="token punctuation">,</span> unused82<span class="token punctuation">,</span> unused83<span class="token punctuation">,</span> unused84<span class="token punctuation">,</span> unused85<span class="token punctuation">,</span> 
            unused86<span class="token punctuation">,</span> unused87<span class="token punctuation">,</span> unused88<span class="token punctuation">,</span> unused89<span class="token punctuation">,</span> unused90<span class="token punctuation">,</span>
            unused91<span class="token punctuation">,</span> unused92<span class="token punctuation">,</span> unused93<span class="token punctuation">,</span> unused94<span class="token punctuation">,</span> unused95<span class="token punctuation">,</span> 
            unused96<span class="token punctuation">,</span> unused97<span class="token punctuation">,</span> unused98<span class="token punctuation">,</span> unused99<span class="token punctuation">,</span> unused100<span class="token punctuation">;</span>

        stackLength<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token function">stackLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        unused1 <span class="token operator">=</span>  unused2 <span class="token operator">=</span>  unused3 <span class="token operator">=</span>  unused4 <span class="token operator">=</span>  unused5 <span class="token operator">=</span>  
        unused6 <span class="token operator">=</span>  unused7 <span class="token operator">=</span>  unused8 <span class="token operator">=</span>  unused9 <span class="token operator">=</span>  unused10 <span class="token operator">=</span>
        unused11 <span class="token operator">=</span> unused12 <span class="token operator">=</span> unused13 <span class="token operator">=</span> unused14 <span class="token operator">=</span> unused15 <span class="token operator">=</span> 
        unused16 <span class="token operator">=</span> unused17 <span class="token operator">=</span> unused18 <span class="token operator">=</span> unused19 <span class="token operator">=</span> unused20 <span class="token operator">=</span>
        unused21 <span class="token operator">=</span> unused22 <span class="token operator">=</span> unused23 <span class="token operator">=</span> unused24 <span class="token operator">=</span> unused25 <span class="token operator">=</span> 
        unused26 <span class="token operator">=</span> unused27 <span class="token operator">=</span> unused28 <span class="token operator">=</span> unused29 <span class="token operator">=</span> unused30 <span class="token operator">=</span>
        unused31 <span class="token operator">=</span> unused32 <span class="token operator">=</span> unused33 <span class="token operator">=</span> unused34 <span class="token operator">=</span> unused35 <span class="token operator">=</span> 
        unused36 <span class="token operator">=</span> unused37 <span class="token operator">=</span> unused38 <span class="token operator">=</span> unused39 <span class="token operator">=</span> unused40 <span class="token operator">=</span>
        unused41 <span class="token operator">=</span> unused42 <span class="token operator">=</span> unused43 <span class="token operator">=</span> unused44 <span class="token operator">=</span> unused45 <span class="token operator">=</span> 
        unused46 <span class="token operator">=</span> unused47 <span class="token operator">=</span> unused48 <span class="token operator">=</span> unused49 <span class="token operator">=</span> unused50 <span class="token operator">=</span>
        unused51 <span class="token operator">=</span> unused52 <span class="token operator">=</span> unused53 <span class="token operator">=</span> unused54 <span class="token operator">=</span> unused55 <span class="token operator">=</span> 
        unused56 <span class="token operator">=</span> unused57 <span class="token operator">=</span> unused58 <span class="token operator">=</span> unused59 <span class="token operator">=</span> unused60 <span class="token operator">=</span>
        unused61 <span class="token operator">=</span> unused62 <span class="token operator">=</span> unused63 <span class="token operator">=</span> unused64 <span class="token operator">=</span> unused65 <span class="token operator">=</span> 
        unused66 <span class="token operator">=</span> unused67 <span class="token operator">=</span> unused68 <span class="token operator">=</span> unused69 <span class="token operator">=</span> unused70 <span class="token operator">=</span>
        unused71 <span class="token operator">=</span> unused72 <span class="token operator">=</span> unused73 <span class="token operator">=</span> unused74 <span class="token operator">=</span> unused75 <span class="token operator">=</span> 
        unused76 <span class="token operator">=</span> unused77 <span class="token operator">=</span> unused78 <span class="token operator">=</span> unused79 <span class="token operator">=</span> unused80 <span class="token operator">=</span>
        unused81 <span class="token operator">=</span> unused82 <span class="token operator">=</span> unused83 <span class="token operator">=</span> unused84 <span class="token operator">=</span> unused85 <span class="token operator">=</span> 
        unused86 <span class="token operator">=</span> unused87 <span class="token operator">=</span> unused88 <span class="token operator">=</span> unused89 <span class="token operator">=</span> unused90 <span class="token operator">=</span>
        unused91 <span class="token operator">=</span> unused92 <span class="token operator">=</span> unused93 <span class="token operator">=</span> unused94 <span class="token operator">=</span> unused95 <span class="token operator">=</span> 
        unused96 <span class="token operator">=</span> unused97 <span class="token operator">=</span> unused98 <span class="token operator">=</span> unused99 <span class="token operator">=</span> unused100 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">stackLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;stack length : &quot;</span> <span class="token operator">+</span> stackLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.jsdelivr.net/gh/WalterXiong/typora-img/img/202205262229643.png" alt="image-20220526222927534"></p><p>从上面结果可以看出，无论是栈帧过大或者是栈内存太小，当新的栈帧无法分配内存的时候，HotSpot 都会抛出 Stackoverflow 异常。</p><p><strong>特殊</strong>：创建线程导致内存溢出异常</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * VM Args: -Xss2M
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaVMStackOOM</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dontStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stackLeaBbyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">dontStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">JavaVMStackOOM</span> oom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaVMStackOOM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oom<span class="token punctuation">.</span><span class="token function">stackLeaBbyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：</p><p>这个代码 ==不要随便运行！！！== ==不要随便运行！！！== ==不要随便运行！！！==</p><p>除非你保存好了你当前的那些工作的情况下，Java 的线程是映射在操作系统上的，无限制的创建线程会给操作系统相当大的压力，会死机！（我就是知道🤣</p><p>还有就是，我在 64 位的操作系统上执行了代码但是知道电脑芜湖~起飞到死机，我任然没有看到虚拟机抛出 OutOfMemoryError 异常，不知道是不是哪里出错了，有待后续装一个 32 位的操作系统再来验证（先挖个坑🤔😏）</p></blockquote><h3 id="_3-方法区-元空间-和运行时常量池溢出" tabindex="-1"><a class="header-anchor" href="#_3-方法区-元空间-和运行时常量池溢出" aria-hidden="true">#</a> 3.方法区（元空间）和运行时常量池溢出</h3><p>由于运行时常量池是方法区的一部分，所以这两个区域可以放到一起来验证，并且我们可以一并验证：<code>JDK 7</code> 开始的去永久带计划，在 <code>JDK 8</code> 完成，使用元空间代替了之前版本的永久带作为方法区的实现，看看字符串常量池是不是移到了堆中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * JDK6: VM Args: -XX:PermSize=6M -XX:MaxPermSize=6M
 * JDK8: VM Args: -Xmx6M -Xms6M
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RuntimeConstantPoolOOM</span> <span class="token punctuation">{</span>
  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
        <span class="token keyword">short</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.jsdelivr.net/gh/WalterXiong/typora-img/img/202206062134511.png" alt="image-20220606213410321"></p><p>出现上述原因是因为自 <code>JDK 7</code> 开始原本位于方法区中的字符床常量池是被移到放到了堆中，所以限制堆大小往常量池中不断的添加常量会造成常量池内存溢出；</p><p>关于字符串常量池的实现出现的问题，我们还能引申出一些更有趣的影响，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RuntimeConstantPoolOOM</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;Code&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;Learning&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;ja&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;va&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// true</span>
<span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,74),d={href:"https://www.zhihu.com/question/51102308/answer/124441115",target:"_blank",rel:"noopener noreferrer"},r=a(`<h3 id="_4-本机直接内存溢出" tabindex="-1"><a class="header-anchor" href="#_4-本机直接内存溢出" aria-hidden="true">#</a> 4.本机直接内存溢出</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * VM Args: -Xmx5M -XX:MaxDirectMemorySize=1M
 * <span class="token keyword">@author</span> xiongjun
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectMemoryOOM</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">Field</span> field <span class="token operator">=</span> <span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;theUnsafe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Unsafe</span> unsafe <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Unsafe</span><span class="token punctuation">)</span> f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            unsafe<span class="token punctuation">.</span><span class="token function">allocateMemory</span><span class="token punctuation">(</span>_1MB<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.jsdelivr.net/gh/WalterXiong/typora-img/img/LZTGD4V$EY1X34T$33M~J44.png" alt=""></p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>运行时数据区的内容基本到这里就总结的差不多了，这章主要对虚拟机运行时数据区中的各个具体区域的作用，功能进行了了解，虚拟机的内存模式更清晰具像化了；然后对 Java 对象的：创建过程（类的检测加载、内存分配、初始化零值、设置对象头、执行init&lt;&gt;() 方法），内存布局，访问定位进了学习，最后是对各个区域进行了逐步的内存溢出测试。</p>`,5);function k(v,m){const e=t("ExternalLinkIcon");return o(),c("div",null,[i,n("p",null,[s('这里会提到 String 的 intern() 方法，该方法的作用是将字符床加入字符串常量池，在 JDK 7 之后字符床常量池存在于 Java 堆中，所以 intern() 仅仅需要记录一下某个字符串首次出现的引用即可（意思就是，在调用 intern 方法时，会先去常量池中搜索一番，如果该字符串没有在常量池中，那么就将该字符串的引用添加到常量池中，在返回该引用，这就是为什么 str1 的执行结果为 true 的原因，至于为甚么 str2 为 false 是因为，"java" 这个字符床并符合“首次出现”这个原则，之前就被加载了，至于是什么时候被加载的，'),n("a",d,[s("可以看下这里"),u(e)])]),r])}const g=p(l,[["render",k],["__file","jvm-memoryarea.html.vue"]]);export{g as default};
