import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c,b as s,d as n,e as l,f as a}from"./app-422b0c18.js";const i={},u=a(`<h1 id="hashmap" tabindex="-1"><a class="header-anchor" href="#hashmap" aria-hidden="true">#</a> HashMap</h1><p>一直没时间静下心来好好看看 HashMap 的源码，择日不如撞日，今儿来浅炫一口，哈哈哈~</p><p><img src="https://cdn.jsdelivr.net/gh/WalterXiong/typora-img/img/202209141419261.png" alt="img"></p><h2 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h2><ul><li><p>实现了 Map 接口，即允许放入 key 为 null 得元素，也允许放入 value 为 null 得元素；</p></li><li><p>不保证放入元素得顺序；</p></li><li><p>hash 冲突处理方式为：冲突链表方式。</p></li></ul><h2 id="底层数据结构" tabindex="-1"><a class="header-anchor" href="#底层数据结构" aria-hidden="true">#</a> 底层数据结构</h2><p>数组 + 链表 + 红黑树</p><h2 id="瞅瞅代码" tabindex="-1"><a class="header-anchor" href="#瞅瞅代码" aria-hidden="true">#</a> 瞅瞅代码</h2><h3 id="_1-hash-扰动" tabindex="-1"><a class="header-anchor" href="#_1-hash-扰动" aria-hidden="true">#</a> 1. hash 扰动</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> h<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单看来，当 key 为空时返回 0，否则返回一个 key 的 hash 值异或 key 的 hash 值无符号右移（下面简称 “右移”） 16 位的一个整形数；那么为什么计算出了 hash 还要让 hash ^ 自己右移 16 位来去最终值呢？这里可能有的朋友就会说，啊！这题我会！我先来：“因为这样可以更有效的减少 hash 碰撞，让元素再桶中分布的更均匀”。虽然但是，这位不知名的朋友说的没错，的确是这样的，那么请问哪里可以买的到呢？……呸，那么为什么这样做就能有效的减少 hash 碰撞呢？额，要开始转杯了，首先我们来假设一下某个数异或自身右移 16 位的场景:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">0101</span> <span class="token number">1010</span> <span class="token number">1000</span> <span class="token number">1000</span> <span class="token number">1010</span> <span class="token number">0011</span> <span class="token number">0111</span> <span class="token number">0100</span>		<span class="token comment">// 数 A</span>
<span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0101</span> <span class="token number">1010</span> <span class="token number">1000</span> <span class="token number">1000</span>		<span class="token comment">// 右移 16 位之后的 A，我们记作 A16</span>
                                       <span class="token operator">^</span>  <span class="token comment">// 异或</span>
————————————————————————————————————————————
<span class="token number">0101</span> <span class="token number">1010</span> <span class="token number">1000</span> <span class="token number">1000</span> <span class="token number">1111</span> <span class="token number">1001</span> <span class="token number">1111</span> <span class="token number">1100</span>		<span class="token comment">// 结果 hash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的异或运算我们能发现 <code>A ^ A16</code> 的结果的高 16 位没有发生变化，因为右移 16 之后高位都补了零，异或时： <code>1 ^ 0 = 1</code>，<code>0 ^ 0 = 0</code>，至此好像并没有看出来做这个异或操作的必要性和它带来的显著的成果。这个时候不妨再来看看 HashMap 是怎么来计算元素在数组中的下标的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span> <span class="token comment">// put() 源码中截取的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>n 表示数组的长度，我们取 HashMap 的默认长度 16 来做个假设，那么 i = ( 16 - 1 ) &amp; hash -&gt; 15 &amp; hash（这里假设是一个数直接调用 hashCode() 生成的，并没有异或自己右移 16 位的 hash 码），计算一下子看看：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">1101</span> <span class="token number">1011</span> <span class="token number">1010</span> <span class="token number">1100</span> <span class="token number">1111</span> <span class="token number">1001</span> <span class="token number">1111</span> <span class="token number">1100</span>		<span class="token comment">// hash</span>
<span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">1111</span>		<span class="token comment">// 15</span>
                                        <span class="token operator">&amp;</span> <span class="token comment">// 与</span>
————————————————————————————————————————————
<span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">1100</span>		<span class="token comment">// 结果（下标）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候我们不难发现，hash 原本的高 16 位信息很可能会被数组槽位的二进制码给屏蔽掉，说人话就是：因为15 的高 16 位全部为 0，所以 hash 原本的高 16 位的信息在经过上面的 &amp; 运算之后，全部丢失了。这时候有的朋友可能会说，即便是丢失了高位的特征信息，不同的 hashcode 还是可以计算出不同的槽位来，但是假设有两个哈希值的低位十分接近而高位差异很大，那么这两个哈希值计算出得出的桶下标就会很接近，在插入 HashMap 中时就会在相邻得位置，这个样的话哈希碰撞的机率就会变大，从而影响哈希散列的效果。</p><blockquote><p>插播一条一位不愿透露姓名的张一周先生的小 tips：</p><p>哈希扰动算法中使用异或，是因为 <code>^</code> 能更好的保留大部分的“特征”，因为，如果使用 <code>&amp;</code> （与）运算，运算的结果会向 0 靠拢；<code>|</code>（或）运算的结果会向 1 靠拢。</p></blockquote><h3 id="_2-初始容量" tabindex="-1"><a class="header-anchor" href="#_2-初始容量" aria-hidden="true">#</a> 2. 初始容量</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * The default initial capacity - MUST be a power of two.
 * 默认初始容量 - 必须是 2 的幂
 */</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// aka 16</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么 HashMap 的长度要是 2 的整数次幂呢？（结论：加快运算，减少 hash 碰撞</p><h4 id="为什么可以加快计算" tabindex="-1"><a class="header-anchor" href="#为什么可以加快计算" aria-hidden="true">#</a> 为什么可以加快计算</h4><p>我们都知道为了找到 key 的位置在哈希表的哪个槽里面，需要计算 <strong><code>hash(key) % 数组长度</code></strong>，<strong>但是！<code>%</code> 计算比 <code>&amp;</code> 慢很多</strong>，所以用 <code>&amp;</code> 代替 <code>%</code>，又为了保证 <code>&amp;</code> 的计算结果等于 <code>%</code> 的结果需要把 length 减 1，也就是 <strong><code>hash(key) &amp; (length - 1)</code></strong></p><h5 id="小实验验证一下" tabindex="-1"><a class="header-anchor" href="#小实验验证一下" aria-hidden="true">#</a> 小实验验证一下：</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;XJ!&quot;</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 86895 -&gt; 0001 0101 0011 0110 1111</span>
    
    <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">65536</span><span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> hashCode <span class="token operator">%</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 21359</span>
    
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> hashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 21359</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="为什么可以减少-hash-碰撞" tabindex="-1"><a class="header-anchor" href="#为什么可以减少-hash-碰撞" aria-hidden="true">#</a> 为什么可以减少 hash 碰撞</h4><p>既然我们已经知道计算槽位的公式，那我们就来个小小的实验。假设我们现在数组的长度 length 可能为奇数或者偶数</p><p><strong>length 为偶数时</strong>，length-1 为奇数，奇数的二进制最后一位是 1，这样便保证了 hash &amp;(length-1) 的最后一位可能为 0，也可能为 1（这取决于 hash 的值），即 &amp; 运算后的结果可能为偶数，也可能为奇数，<strong>这样便可以保证散列的均匀性</strong>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 例如：</span>
length <span class="token operator">=</span> <span class="token number">6</span>，length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">5</span>，<span class="token number">5</span> 的二进制为 <span class="token number">101</span>

hash <span class="token operator">=</span> <span class="token number">2</span>，hash 的二进制为 <span class="token number">010</span>

即 <span class="token number">010</span> <span class="token operator">&amp;</span> <span class="token number">101</span> <span class="token operator">=</span> <span class="token number">000</span>（偶数位置）

hash <span class="token operator">=</span> <span class="token number">3</span>，hash 的二进制为 <span class="token number">011</span>

即 <span class="token number">011</span> <span class="token operator">&amp;</span> <span class="token number">101</span> <span class="token operator">=</span> <span class="token number">001</span> （奇数位置）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而如果 <strong>length 为奇数</strong>的话，很明显 length-1 为偶数，它的最后一位是 0，这样 hash &amp; (length-1) 的最后一位肯定为 0，即只能为偶数，这样任何 hash 值都<strong>只会被</strong>散列到数组的<strong>偶数下标位置</strong>上，这便<strong>浪费了近一半的空间</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 例如：</span>
length <span class="token operator">=</span> <span class="token number">3</span>，length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">2</span>，<span class="token number">2</span> 的二进制是 <span class="token number">10</span>

<span class="token number">10</span> 无论与什么数进行 <span class="token operator">&amp;</span> 运算，结果都是偶数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，length 取 2 的整数次幂，是为了使不同 hash 值发生碰撞的概率较小，这样就能使元素在哈希表中<strong>均匀地散列</strong>。</p><h4 id="初始化-hashmap-时对于你输入非2的次方的容量数-会怎么样" tabindex="-1"><a class="header-anchor" href="#初始化-hashmap-时对于你输入非2的次方的容量数-会怎么样" aria-hidden="true">#</a> 初始化 HashMap 时对于你输入非2的次方的容量数，会怎么样？</h4><p>小聪明是吧，这好吗？这不好。HashMap 不会让你们这么做的，实际上你给定的初始容量，HashMap 还会判断是不是2的次幂，如果不是，则给出一个大于给定容量的最小 2 的次幂的值作为新的容量。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Returns a power of two size for the given target capacity.
 */</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> cap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">:</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这也验证了一个重要的编程思想：永远要把客户当成傻子。（噗嗤，耗子尾汁~</p><h3 id="_3-加载因子" tabindex="-1"><a class="header-anchor" href="#_3-加载因子" aria-hidden="true">#</a> 3. 加载因子</h3><p>负载因子是扩充 table 的指标量，默认 0.75，当 Map 中 <code>entry（键值对）数量 / bins 总量（数组长度） &gt; loadFactor</code> 时，扩容 table 到原来容量的两倍。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
* The load factor used when none specified in constructor.
* 当构造函数中没有指定时加载的加载因子
*/</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> <span class="token constant">DEFAULT_LOAD_FACTOR</span> <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>emmmm... 好像大家都喜欢问这个加载因子为什么要选择 0.75 为什么不是其他的数值，(⊙﹏⊙) 啊这... 我只能搬出源码中作者的注释（英文，有点难顶...</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/*
 * Ideally, under random hashCodes, the frequency of
 * nodes in bins follows a Poisson distribution
 * (http://en.wikipedia.org/wiki/Poisson_distribution) with a
 * parameter of about 0.5 on average for the default resizing
 * threshold of 0.75, although with a large variance because of
 * resizing granularity. Ignoring variance, the expected
 * occurrences of list size k are (exp(-0.5) * pow(0.5, k) /
 * factorial(k)). The first values are:
 *
 * 0:    0.60653066		// 加载因子 = 0.75时，bin 中链表长度 = 0，随机节点落入 bin 中的概率
 * 1:    0.30326533		// 加载因子 = 0.75时，bin 中链表长度 = 1，随机节点落入 bin 中的概率
 * 2:    0.07581633		// ...
 * 3:    0.01263606
 * 4:    0.00157952
 * 5:    0.00015795
 * 6:    0.00001316
 * 7:    0.00000094
 * 8:    0.00000006		// 加载因子 = 0.75时，bin 中链表长度 = 8，随机节点落入 bin 中的概率
 * more: less than 1 in ten million
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,41),k={href:"http://en.wikipedia.org/wiki/Poisson_distribution",target:"_blank",rel:"noopener noreferrer"},r=a(`<h4 id="加载因子能不能改一下" tabindex="-1"><a class="header-anchor" href="#加载因子能不能改一下" aria-hidden="true">#</a> 加载因子能不能改一下</h4><p>改成 0.5 或者 1，会怎么样？能大于1吗？我们可以思考一下：</p><ul><li>负载因子越小，数组扩容的频率就会变高，table（数组）增长的速度也就越快，相应出现 hash 碰撞的概率就越小，bin 中链表的长度越短，同时空间利用率低，table 看上去会非常稀疏。</li><li>负载因子越大，数组扩容的频率就会变低，table（数组）增长的速度也就越慢，相应出现 hash 碰撞的概率就越大，bin 中链表的长度越长，同时空间利用率高，table 看上去会非常稠密。</li></ul><p>看图从直观上感觉 table 的稀疏程度:</p><p><img src="https://cdn.jsdelivr.net/gh/WalterXiong/typora-img/img/202209191405699.png" alt="image-20220919140517784"></p><p>例如：</p><ul><li><p>场景一：table 长度 = 10, 负载因子 = 0.1, 每加入一个元素就会扩容，浪费了空间，但一定不会出现碰撞；</p></li><li><p>场景二：如果将场景一中的负载因子修改为 1, 则加入 10 个元素后才会触发扩容，可想而知因为这 10 个元素是通过 hash % size 落入 table 中的，最理想的状态是每个 bulk 中落入一个元素，但几乎可以肯定的是，有的 bulk 中落入了两个或更多元素 (形成链表)，即出现了 hash 碰撞；</p></li><li><p>综上可以大于 1 但是不推荐大于 1。</p></li></ul><h3 id="_4-put-分析" tabindex="-1"><a class="header-anchor" href="#_4-put-分析" aria-hidden="true">#</a> 4. put 分析</h3><p>put() 和 get() 方法是大家使用 map 时最为熟悉的方法，先看看 put 因为 get 相对来说会简单很多。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Implements Map.put and related methods.
 *
 * <span class="token keyword">@param</span> <span class="token parameter">hash</span> 			key 的 hash 值
 * <span class="token keyword">@param</span> <span class="token parameter">key</span>  			要存入 map 的 key
 * <span class="token keyword">@param</span> <span class="token parameter">value</span> 		要存入 map 的 value
 * <span class="token keyword">@param</span> <span class="token parameter">onlyIfAbsent</span> 	如果是 true，那么只有在不存在该 key 时才会进行 put 操作
 * <span class="token keyword">@param</span> <span class="token parameter">evict</span> 		如果为 false，则表处于创建模式（不关心）
 * <span class="token keyword">@return</span> 				前一个值，如果没有的话就返回空
 */</span>
<span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span> <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	
	<span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> 
	
	<span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">;</span> 
	
	<span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>
	
    <span class="token comment">// 第一次 put 值的时候，会触发下面的 resize() 里的初始化数组，从而获取数组的长度</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
    <span class="token comment">// 找当前 entry 在数组中计算出的的下标的位置</span>
    <span class="token comment">// 如果此位置没有值，那么直接初始化一下 Node 并放置在这个位置就可以了</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> 
    <span class="token comment">// 数组该位置有数据，表示存在冲突</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span> 
		<span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span> 
        
		<span class="token class-name">K</span> k<span class="token punctuation">;</span> <span class="token comment">// 找到该位置上的元素值</span>
		
        <span class="token comment">// 首先比较该位置上的第一个数据和我们将要插入的数据的 key 是否“相等”</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			
			e <span class="token operator">=</span> p<span class="token punctuation">;</span>
            
		<span class="token punctuation">}</span>
        <span class="token comment">// 不然的话看该位置上的第一个数据是不是红黑树的节点，如果是，那么调用红黑树的插入方法进行插入值</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> 
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 到这以上情况都不满足，说明该位置要按照链表来进行处理</span>
            <span class="token comment">// 遍历这个位置上的链表节点</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 如果没有下一个链表节点，就新建一个节点将这个 entry 放进去，尾插到链表上</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token comment">// 如果链表的长度 &gt;= 8个元素时，那么将链表转换为红黑树（树化）</span>
					<span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">&gt;=</span> <span class="token constant">TREEIFY_THRESHOLD</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// -1 for 1st</span>
						<span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
					
					<span class="token keyword">break</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
				<span class="token comment">// 挨个判断当前要插入的元素 和 链表上的每个元素的 key 是否 “相等”</span>
                <span class="token comment">// 如果 key 相等那么表示在 map 中存在 key 相用的元素，跳出遍历</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> 
                    <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token keyword">break</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
				
				p <span class="token operator">=</span> e<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
        
        <span class="token comment">// e!=null 说明存在旧值的 key 与要插入的key “相等”</span>
        <span class="token comment">// 对于我们分析的put操作，下面这个 if 其实就是进行 &quot;值覆盖&quot;，然后返回旧值</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// existing mapping for key</span>
			<span class="token class-name">V</span> oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token operator">++</span>modCount<span class="token punctuation">;</span>
	<span class="token comment">// 如果 HashMap 由于新插入这个值导致 size 已经超过了阈值，需要进行扩容</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">&gt;</span> threshold<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-resize-分析" tabindex="-1"><a class="header-anchor" href="#_5-resize-分析" aria-hidden="true">#</a> 5. resize 分析</h3><p>resize() 方法用于数组的<strong>初始化</strong>或者<strong>扩容</strong>，每次扩容完都是原来的 2 倍，并且进行数据迁移。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	
	<span class="token comment">// 将当前数组拿出来 赋值 给 oldTab</span>
	<span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span>
	
	<span class="token comment">// 如果 oldTab 是空，表示是第一次插入数据数组的容量（长度）为 0</span>
	<span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	
	<span class="token comment">// 数组扩容的临界值，第一次插入时也是 0</span>
	<span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span>
	
	<span class="token comment">// 新数组的容量，新的扩容临界值</span>
	<span class="token keyword">int</span> newCap<span class="token punctuation">,</span> newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	
	<span class="token comment">// 判断容量是否大于0，其实就是看当前数组是不是空的</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		
		<span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">&gt;=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			threshold <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> oldTab<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">&amp;&amp;</span> 
                 oldCap <span class="token operator">&gt;=</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// double threshold</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> 
	<span class="token comment">// 初始化容量为 0，但是阈值不为 0，对应使用 new HashMap(int initialCapacity) 初始化后，第一次 put 的时候</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		newCap <span class="token operator">=</span> oldThr<span class="token punctuation">;</span>
	<span class="token punctuation">}</span> 
	<span class="token comment">// 初始化容量为 0，但是阈值也为 0，对应使用 new HashMap() 初始化后，第一次 put 的时候</span>
	<span class="token keyword">else</span> <span class="token punctuation">{</span>               
		<span class="token comment">// 使用 默认的初始化容量 16</span>
		newCap <span class="token operator">=</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">;</span>
		<span class="token comment">// 使用 默认的容量 * 默认的负载因子（0.75） = 新的阈值 </span>
		newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_LOAD_FACTOR</span> <span class="token operator">*</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
	<span class="token keyword">if</span> <span class="token punctuation">(</span>newThr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>newCap <span class="token operator">*</span> loadFactor<span class="token punctuation">;</span>
		newThr <span class="token operator">=</span> <span class="token punctuation">(</span>newCap <span class="token operator">&lt;</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">&amp;&amp;</span> ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">?</span> 
                  <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
	threshold <span class="token operator">=</span> newThr<span class="token punctuation">;</span>

	<span class="token comment">// 用上面新的数组大小 初始化一个 新的数组</span>
	<span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span>
    
	<span class="token comment">// 如果只是初始化数组的话，那么到此结束，直接返回新的数组。</span>
	table <span class="token operator">=</span> newTab<span class="token punctuation">;</span> 
	
	<span class="token comment">/*
	 * 以下为扩容 数据迁移的逻辑
	 */</span>
	<span class="token comment">//如果当前操作的数组不为空 那么就开始 执行数据迁移的逻辑</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		
		<span class="token comment">// 开始遍历原数组</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
		
			<span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span> <span class="token comment">// 临时节点</span>
			
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				
				oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
				
				<span class="token comment">// 如果该数组位置上只有一个元素，那就简单了，简单迁移这个元素就可以了</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
					newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
				<span class="token comment">// 否则看这个节点是不是树节点，如果是红黑树的树节点（留个坑 后续探究</span>
				<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
				<span class="token comment">// 非单个元素也不是树节点，那只能是链表</span>
				<span class="token comment">// 需要将这条链表拆成两条新的链表</span>
				<span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// preserve order</span>

					<span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> loHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> loTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
					<span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> hiHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> hiTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
					<span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>
					
					<span class="token keyword">do</span> <span class="token punctuation">{</span>
						next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
						
						<span class="token comment">// 判断该元素在旧数组中的位置（数组下标），是否与在新数组中的位置相同</span>
						<span class="token comment">// 若下标不变，则将该元素放入一条以 loHead 为头节点的链表中</span>
						<span class="token comment">// 反之将该元素放入一条以 hiHead 为头节点的链表</span>
						<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
							
							<span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
								loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>
							<span class="token punctuation">}</span> 
							<span class="token keyword">else</span> <span class="token punctuation">{</span>
								loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>
							<span class="token punctuation">}</span>
							loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>
						<span class="token punctuation">}</span>
						<span class="token keyword">else</span> <span class="token punctuation">{</span>
							
							<span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
								hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>
							<span class="token punctuation">}</span>
							<span class="token keyword">else</span> <span class="token punctuation">{</span>
								hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>
							<span class="token punctuation">}</span>
							hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>
						<span class="token punctuation">}</span>
						
					<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					
					<span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
						loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
						<span class="token comment">// 下标位置相同的元素链表</span>
						newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
					
					<span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
						hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
						<span class="token comment">// 下标位置等于元素在旧数组中的下标加上就数组的长度的链表</span>
						newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> newTab<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-get-分析" tabindex="-1"><a class="header-anchor" href="#_6-get-分析" aria-hidden="true">#</a> 6. get 分析</h3><p>相对于 put 来说，get 真的太简单了。</p><ul><li>计算 key 的 hash 值，根据 hash 值找到对应数组下标：<code>hash &amp; (length-1)</code></li><li>判断数组该位置处的元素是否刚好就是我们要找的，如果不是，走第三步</li><li>判断该元素类型是否是 TreeNode，如果是，用红黑树的方法取数据，如果不是，走第四步</li><li>遍历链表，直到找到相等（<code>==</code> 或 <code>equals</code>）的 key</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
    <span class="token comment">// 接收当前数组</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> 
    
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> first<span class="token punctuation">,</span> e<span class="token punctuation">;</span> 
    
    <span class="token comment">// 接收当前数组长度</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span> 
    
    <span class="token comment">// 接收 entry 的 key 值</span>
    <span class="token class-name">K</span> k<span class="token punctuation">;</span>
    
    <span class="token comment">// 1️⃣ 如果当前数组不为空  并且 数组中存有元素 并且 要取得元素得 hash 计算出得数组下标得位置有值</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span>first <span class="token operator">=</span> tab<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
        <span class="token comment">// 2️⃣ 判断第一个节点是不是就是需要的</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token comment">// always check first node</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> first<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> first<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 3️⃣ 判断第一个节点是不是红黑树节点</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>first<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTreeNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 4️⃣ 遍历链表，直到找到链尾部，找到就返回 节点，否则返回 空</span>
            <span class="token keyword">do</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
                    <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> e<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ciao~ ๛ก(ｰ̀ωｰ́ก)</p>`,18);function d(m,v){const t=e("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("用我 82 年的塑料英语大概看了一下，咳咳咳，大致是说：理想情况下， hashcode 随机 ，加载因子为 0.75 的情况下，尽管由于粒度调整会产生较大的方差，节点的分布频率仍然会服从参数为 0.5 的"),s("a",k,[n("泊松分布 ( Poisson distribution )"),l(t)]),n("。同时给出了桶中元素个数和概率的对照表。从上面的表中可以看到当桶中元素到达8个的时候，发生的概率仅有 0.00000006，概率已经变得非常小。也就是说用 0.75 作为加载因子，每个碰撞位置的链表长度超过８个概率更是小于千万分之一，是几乎不可能的。")]),r])}const y=p(i,[["render",d],["__file","HashMap.html.vue"]]);export{y as default};
