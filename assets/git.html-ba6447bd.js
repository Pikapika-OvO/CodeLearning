import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as e,f as n}from"./app-422b0c18.js";const i={},t=n(`<h1 id="git-命令" tabindex="-1"><a class="header-anchor" href="#git-命令" aria-hidden="true">#</a> Git 命令</h1><h2 id="_1-设置username和email" tabindex="-1"><a class="header-anchor" href="#_1-设置username和email" aria-hidden="true">#</a> 1. 设置username和email</h2><p>在把本项目上传到github之前还需要分别输入设置username和email，因为github每次commit都会记录他们。所以分别输入如下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// 用户名标识  ---- 实际也可以填写您的github仓库的名称
$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;your name&quot;</span>
// 邮箱标识   ---- 可以填写github仓库的邮箱
$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;your_email@youremail.com&quot;</span>		
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：<code>git config --global</code> “参数”，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱。</p></blockquote><h2 id="_2-创建ssh-key" tabindex="-1"><a class="header-anchor" href="#_2-创建ssh-key" aria-hidden="true">#</a> 2. 创建ssh key</h2><p>为了让github能够识别是我们自己上传文件，需要创建ssh key</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">&quot;your_email@youremail.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-将ssh可以写入github" tabindex="-1"><a class="header-anchor" href="#_3-将ssh可以写入github" aria-hidden="true">#</a> 3. 将ssh可以写入github</h2><p>创建好本地的ssh key后，我们需要让github知道这个ssh key是我们自己，所以需要将生成的ssh key复制出来，写入github，在mac下在终端输入</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> ~/.ssh/id_rsa.pub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时在终端会显示出刚刚创建好的 ssh key，复制出来，在github在点击头像，然后点击 setting，在找到 SSH and GPG keys，创建一个 new ssh key，然后将刚刚复制的 ssh key 填入即可。</p><h2 id="_4-验证是否连接成功" tabindex="-1"><a class="header-anchor" href="#_4-验证是否连接成功" aria-hidden="true">#</a> 4.验证是否连接成功</h2><p>在终端输入</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果回车看到：<strong>Hi WalterXiong! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</strong> 。表示已成功连上 github。</p><h2 id="_5-添加远程地址" tabindex="-1"><a class="header-anchor" href="#_5-添加远程地址" aria-hidden="true">#</a> 5. 添加远程地址</h2><p>在与 github 连接成功后，如何才能让相应的项目上传到对应的仓库呢？这里就需要添加远程地址，从而让我们的本地项目顺利到达对应的仓库。</p><p>打开终端，输入</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>//git查看远程仓库信息
$ <span class="token function">git</span> remote      

//后面的 <span class="token variable"><span class="token variable">\`</span>yourName<span class="token variable">\`</span></span> 和 <span class="token variable"><span class="token variable">\`</span>yourRepo<span class="token variable">\`</span></span> 分别是你的 github 的用户名和刚才新建的仓库名。
$ <span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:<span class="token string">&quot;yourName&quot;</span>/<span class="token string">&quot;yourRepo&quot;</span>.git 

$ <span class="token function">git</span> remote <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-上传项目" tabindex="-1"><a class="header-anchor" href="#_6-上传项目" aria-hidden="true">#</a> 6. 上传项目</h2><p>进入项目，在终端运行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看要上传的文件是否正确，然后将项目下的所有文件添加到git跟踪范围。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>记录此次提交并上传</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;my project push&#39;</span>
$ <span class="token function">git</span> push origin main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 <strong>main</strong> 指的是主分支名，如果是其他分支，则填写相应的分支名。</p><p>这样我们就将我们的项目上传到 github 仓库。</p><h2 id="_7-撤回提交-commit" tabindex="-1"><a class="header-anchor" href="#_7-撤回提交-commit" aria-hidden="true">#</a> 7. 撤回提交( commit )</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset <span class="token parameter variable">--soft</span> HEAD^
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,31),r=[t];function l(d,c){return s(),e("div",null,r)}const p=a(i,[["render",l],["__file","git.html.vue"]]);export{p as default};
