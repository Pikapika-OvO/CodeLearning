const e=JSON.parse('{"key":"v-1d1b8092","path":"/language/java/frame/SpringFamily/Spring-MVC.html","title":"Spring - MVC","lang":"zh-CN","frontmatter":{"description":"Spring - MVC springMVC 开始项目 DispatcherServlet：前端控制器 用户请求到达前端控制器，它相当于 MVC 模式中的 C（Controller），DispatcherServlet 是整个流程控制的中心，由它调用其它组件处理用户的请求，DispatcherServlet 的存在降低了组件之间的耦合性。 作用：作为接受请求，响应结果，相当于转发器，中央处理器，减少其他组件之间的耦合度。 HandlerMapping：处理器映射器 HandlerMapping 负责根据用户请求找到 Handler（即：处理器），SpringMVC 提供了不同的映射器实现实现不同的映射方式，例如：配置文件方式、实现接口方式、注解方式等。 作用：根据请求的 Url 查找 Handler Handler：处理器 （需要程序员开发） Handler 是继 DispatcherServlet 前端控制器的后端控制器，在 DispatcherServlet 的控制下，Handler 对具体的用户请求进行处理。由于 Handler 设计到具体的用户业务请求，所以一般情况需要程序员根据业务需求开发 Handler。 HandlerAdapter：处理器适配器 通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。 主要作用是适配处理器中的各个方法！！！ ViewResolver：视图解析器 ViewResolver 负责将处理结果生成 View 视图，ViewResolver 首先根据逻辑视图名解析成物理视图名，即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面的展示给用户。 SpringMVC 框架提供了很多 View 视图类型，包括：JSTLView、freemarkerView、pdfView等等. View：视图 （需要程序员开发 jsp） View是一个接口，实现类支持不同的View类型（jsp、freemarker、pdf） 一般情况下需要通过页面标签或者页面模板技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面。","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-v2-demo.mrhope.site/CodeLearning/language/java/frame/SpringFamily/Spring-MVC.html"}],["meta",{"property":"og:site_name","content":"CodeLearning"}],["meta",{"property":"og:title","content":"Spring - MVC"}],["meta",{"property":"og:description","content":"Spring - MVC springMVC 开始项目 DispatcherServlet：前端控制器 用户请求到达前端控制器，它相当于 MVC 模式中的 C（Controller），DispatcherServlet 是整个流程控制的中心，由它调用其它组件处理用户的请求，DispatcherServlet 的存在降低了组件之间的耦合性。 作用：作为接受请求，响应结果，相当于转发器，中央处理器，减少其他组件之间的耦合度。 HandlerMapping：处理器映射器 HandlerMapping 负责根据用户请求找到 Handler（即：处理器），SpringMVC 提供了不同的映射器实现实现不同的映射方式，例如：配置文件方式、实现接口方式、注解方式等。 作用：根据请求的 Url 查找 Handler Handler：处理器 （需要程序员开发） Handler 是继 DispatcherServlet 前端控制器的后端控制器，在 DispatcherServlet 的控制下，Handler 对具体的用户请求进行处理。由于 Handler 设计到具体的用户业务请求，所以一般情况需要程序员根据业务需求开发 Handler。 HandlerAdapter：处理器适配器 通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。 主要作用是适配处理器中的各个方法！！！ ViewResolver：视图解析器 ViewResolver 负责将处理结果生成 View 视图，ViewResolver 首先根据逻辑视图名解析成物理视图名，即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面的展示给用户。 SpringMVC 框架提供了很多 View 视图类型，包括：JSTLView、freemarkerView、pdfView等等. View：视图 （需要程序员开发 jsp） View是一个接口，实现类支持不同的View类型（jsp、freemarker、pdf） 一般情况下需要通过页面标签或者页面模板技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-16T01:20:44.000Z"}],["meta",{"property":"article:author","content":"Mr.Walter"}],["meta",{"property":"article:modified_time","content":"2023-06-16T01:20:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring - MVC\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-16T01:20:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Walter\\",\\"url\\":\\"https://walterxiong.github.io/CodeLearning/\\"}]}"]]},"headers":[{"level":2,"title":"实际项目配置","slug":"实际项目配置","link":"#实际项目配置","children":[]}],"git":{"createdTime":1686878444000,"updatedTime":1686878444000,"contributors":[{"name":"WalterXiong","email":"xiongjun-ol@outlook.com","commits":1}]},"readingTime":{"minutes":2.82,"words":847},"filePathRelative":"language/java/frame/SpringFamily/Spring-MVC.md","localizedDate":"2023年6月16日","excerpt":"<h1> Spring - MVC</h1>\\n<p>springMVC 开始项目</p>\\n<p><img src=\\"https://gitee.com/walterxiong/typora-images/raw/master/SpringMVC.png\\" alt=\\"\\"></p>\\n<ol>\\n<li>\\n<p><strong><code>DispatcherServlet</code></strong>：<strong>前端控制器</strong></p>\\n<p>用户请求到达前端控制器，它相当于 MVC 模式中的 C（Controller），DispatcherServlet 是整个流程控制的中心，由它调用其它组件处理用户的请求，DispatcherServlet 的存在降低了组件之间的耦合性。</p>\\n<p>作用：作为接受请求，响应结果，相当于转发器，中央处理器，减少其他组件之间的耦合度。</p>\\n</li>\\n<li>\\n<p><strong><code>HandlerMapping</code></strong>：<strong>处理器映射器</strong></p>\\n<p>HandlerMapping 负责根据用户请求找到 Handler（即：处理器），SpringMVC 提供了不同的映射器实现实现不同的映射方式，例如：配置文件方式、实现接口方式、注解方式等。</p>\\n<p>作用：根据请求的 Url 查找 Handler</p>\\n</li>\\n<li>\\n<p><strong><code>Handler</code></strong>：<strong>处理器</strong> （需要程序员开发）</p>\\n<p>Handler 是继 DispatcherServlet 前端控制器的后端控制器，在 DispatcherServlet 的控制下，Handler 对具体的用户请求进行处理。由于 Handler 设计到具体的用户业务请求，所以一般情况需要程序员根据业务需求开发 Handler。</p>\\n</li>\\n<li>\\n<p><strong><code>HandlerAdapter</code></strong>：<strong>处理器适配器</strong></p>\\n<p>通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。</p>\\n<p>主要作用是适配处理器中的各个方法！！！</p>\\n</li>\\n<li>\\n<p><strong><code>ViewResolver</code></strong>：<strong>视图解析器</strong></p>\\n<p>ViewResolver 负责将处理结果生成 View 视图，ViewResolver 首先根据逻辑视图名解析成物理视图名，即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面的展示给用户。</p>\\n<p>SpringMVC 框架提供了很多 View 视图类型，包括：JSTLView、freemarkerView、pdfView等等.</p>\\n</li>\\n<li>\\n<p><strong><code>View</code></strong>：<strong>视图</strong> （需要程序员开发 jsp）</p>\\n<p>View是一个接口，实现类支持不同的View类型（jsp、freemarker、pdf）</p>\\n<p>一般情况下需要通过页面标签或者页面模板技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面。</p>\\n</li>\\n</ol>","autoDesc":true}');export{e as data};
